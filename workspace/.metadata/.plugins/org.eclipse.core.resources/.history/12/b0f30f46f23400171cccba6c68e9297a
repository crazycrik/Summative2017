
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.*;
import java.applet.*;

//public class Main extends JApplet
public class playArea extends Applet implements Runnable, KeyListener{
	// variables
	static Thread th;
	private SpaceShip player;
	private SpaceShip enemy;
	private Shot [] shots;
	private Shot[] enShots;
	private meteor spaceRocks[]; 

	private int score = 0;
	private int enemyMS = 0;
	private int enemyMSY = 0;
	private int timing = 0;
	private final int shotSpeed = -15;
	private final int enShotSpeed = 15;
	private final int playerLeftSpeed = -5;
	private final int playerRightSpeed = 5;
	private int lives = 5;
	private Rectangle hitBoxP;
	private Rectangle hitBoxE;

	private JLabel showScore = new JLabel(); 
	private boolean playerMoveLeft;
	private boolean playerMoveRight;


	private Image dbImage;
	private Graphics dbg;

	public void init()  {
		setBackground (Color.green);//green background
		player = new SpaceShip(150, 280);//new player ship
		enemy = new SpaceShip(150, 10);//new enemy
		shots = new Shot[10];  // number of shots
		enShots = new Shot[10];//new enemy shots
		enemyMS = 5;//movespeed of enemy
		hitBoxE = new Rectangle(150, 10, 20, 15);//new hitbox 
		hitBoxP = new Rectangle(150,280,20,15);//hitbox
		timing = 0;//time the stuffs
		enemyMSY = 1;//Y move speed for enemy
		spaceRocks = new meteor[10];//new metor array

	}//end method


	public void start ()  {
		th = new Thread(this);
		th.start ();
	}//end method

	public void stop()  {
		th.stop();
	}//end method

	public void destroy()  {
		th.stop();
	}//end method


	public void run ()  {

		for(int i = 0; i<spaceRocks.length; i++){//open for
			spaceRocks[i] = new meteor((int)(Math.random()*360), (int)(Math.random() * 240));//intialize
		}//end for

		new Timer(16, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				for(int i=0; i<shots.length; i++){
					if(shots[i] != null)  {
						shots[i].moveShot(shotSpeed);
						if(shots[i].getYPos() < 0)
							shots[i] = null;//deletes shot
					}//end if
				}//end for

				for(int i=0; i<enShots.length; i++){
					if(enShots[i] != null)  {
						enShots[i].moveShot(enShotSpeed);
						if(enShots[i].getYPos() > 360)
							enShots[i] = null;//deletes shot
					}//end if
				}//end for

				for(int i = 0; i<spaceRocks.length; i++){
					if(spaceRocks[i] != null){
						spaceRocks[i].moveMetY(1);
						spaceRocks[i].moveMetX(2);
					}else if(spaceRocks[i].getXPos() > 480 || spaceRocks[i].getYPos() > 360){//open
						spaceRocks[i].moveMetX(-480);
						spaceRocks[i].moveMetY(-360);
					}
				}//end for


				if(playerMoveLeft == true){
					player.moveX(playerLeftSpeed);//move player left
				}//end if
				else if(playerMoveRight == true) {
					player.moveX(playerRightSpeed);//move the player right
				}//end if

				hitBoxP.x = player.x_pos;//new hitbox for player

				if(enemy.x_pos > 480 || enemy.x_pos < 0){//check for off screen
					enemyMS*= -1;//reverse the thigng
				}//end if
				if(enemy.y_pos > 320 || enemy.y_pos < 0){//check for off screen
					enemy.y_pos = 0;
				}//end if

				if(timing%60 == 0){
					for(int i=0; i<enShots.length; i++){
						if(enShots[i] == null){
							enShots[i] = enemy.generateShot();//shoot

						}//end if
					}//end for
				} 



				enemy.moveX(enemyMS);//moves the enemy to the left/right
				enemy.moveY(1);//moves the enemy down
				hitBoxE.x = enemy.x_pos;//updates the hitbox





				if(enemy != null){
					for(int q = 0; q<shots.length; q++){//open for
						if(shots[q]!= null){//open if
							if(shots[q].checkInter(new Rectangle(enemy.x_pos, enemy.y_pos, 20, 15))){//open if
								System.out.println("hit");//debug
								score+=1;//add to score
								enemy.x_pos = (int)(Math.random()*480);//random the "new enemy", max one on screen
								enemy.y_pos = 0;//move back to top
								System.out.println("hits - " + score);//debug code

								shots[q] = null;



							}//end if
						}//end if
					}//end for
				}//end if


				if(player != null){
					for(int q = 0; q<enShots.length; q++){//open for
						if(enShots[q]!= null){//open if
							if(enShots[q].checkInter(new Rectangle(player.x_pos, player.y_pos, 20, 15))){//open if
								System.out.println("u got hit");//debug
								lives-=1;//add to score
								player.x_pos = (int)(Math.random()*480);//random the "respawning player", max one on screen
								System.out.println("hits - " + score);//debug code
								System.out.println("lives - " + lives);//debug code to print lives
								enShots[q] = null;//deletes shot

								if(lives == 0){//open if
									JOptionPane.showMessageDialog(null, "You lose, program closing");//git gud
									System.exit(1);//ends
								}//end if
							}//end if
						}//end if
					}//end for
					for(int q = 0; q<spaceRocks.length; q++){
						if(spaceRocks[q] != null){
							if(spaceRocks[q].checkInter(new Rectangle(player.x_pos, player.y_pos, 20, 15))){
								System.out.println("u got hit");//debug
								lives-=1;//add to score
								player.x_pos = (int)(Math.random()*480);//random the "respawning player", max one on screen
								System.out.println("dead, respawning player");
								System.out.println("hits - " + score);//debug code
								System.out.println("lives - " + lives);//debug code to print lives
								spaceRocks[q] = null;//deletes shot

								if(lives <= 0){//open if
									JOptionPane.showMessageDialog(null, "You lose, program closing");//git gud
									System.exit(1);//ends
								}//end if

							}
						}
					}
				}//end if




				timing++;//adds 1 per tick
				//update(dbg);
				repaint();//repaints the GUI
			}//end actionlis
		}).start();//end timer and start
		try {
			Thread.sleep(10);
		}
		catch (InterruptedException ex){
			// do nothing
		}

		Thread.currentThread().setPriority(Thread.MAX_PRIORITY);

	}//end method



	public void update (Graphics g)  {
		if (dbImage == null)    {
			dbImage = createImage (this.getSize().width, this.getSize().height);
			dbg = dbImage.getGraphics ();
		}

		dbg.setColor (getBackground ());
		dbg.fillRect (0, 0, this.getSize().width, this.getSize().height);

		dbg.setColor (getForeground());
		paint (dbg);

		g.drawImage (dbImage, 0, 0, this);
	}

	public boolean keyDown(Event e, int key){
		if(key == Event.LEFT) {
			playerMoveLeft = true;
			playerMoveRight = false;
		}//end if 
		else if(key == Event.RIGHT){
			playerMoveRight = true;
			playerMoveLeft = false;
		}//end if
		else if(key == 32){
			// generate new shot and add it to shots array
			for(int i=0; i<shots.length; i++){
				if(shots[i] == null){
					shots[i] = player.generateShot();
					break;
				}//end if
			}//end for
		}//end if
		return true; //returns true
	}//end method

	public boolean keyUp(Event e, int key)  {
		if(key == Event.LEFT)    {
			playerMoveLeft = false;
		}    else if(key == Event.RIGHT)    {
			playerMoveRight = false;
		}//end if

		return true; //return true
	}//end method


	public void paint (Graphics g)  {
		player.drawPlayer(g);//draw player
		enemy.drawPlayer(g);//draw enemy


		// draw shots
		for(int i=0; i<shots.length; i++)    {//open
			if(shots[i] != null)      {//open
				shots[i].drawShot(g);//draws the shots (player)
			}//end if
		}//end for


		for(int i = 0; i<enShots.length; i++){//open for
			if(enShots[i] != null){//open if
				enShots[i].drawShot(g);//draws enemy shot
			}//end if
		}//end for

		for(int i = 0; i<spaceRocks.length; i++){//open for
			if(spaceRocks != null){//open if
				spaceRocks[i].drawRock(g);//draws met
			}//end if
		}//end for


	}//end method
	public String getAppletInfo() {
		// provide information about the applet
		return "Title:   \nAuthor: Chris  \n Space Assignment";
	}


	/**
	 * Returns parameter information about this JApplet. 
	 * Returns information about the parameters than are understood by this JApplet.
	 * An applet should override this method to return an array of Strings 
	 * describing these parameters. 
	 * Each element of the array should be a set of three Strings containing 
	 * the name, the type, and a description.
	 *
	 * @return a String[] representation of parameter information about this JApplet
	 */
	public String[][] getParameterInfo() {
		// provide parameter information about the applet
		String paramInfo[][] = {
				{"firstParameter",    "1-10",    "description of first parameter"},
				{"status", "boolean", "description of second parameter"},
				{"images",   "url",     "description of third parameter"}
		};
		return paramInfo;
	}


	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}


	@Override
	public void keyPressed(KeyEvent e) {
		int key = e.getKeyCode();
		if(key == KeyEvent.VK_LEFT) {
			System.out.print("LEFT\n");
			playerMoveLeft = true;
		}
		else if(key == KeyEvent.VK_RIGHT){
			System.out.print("RIGHT\n");
			playerMoveRight = true;
		}
		else if(key == 32){
			for(int i=0; i<shots.length; i++){
				if(shots[i] == null){
					shots[i] = player.generateShot();
					break;
				}//end if
			}//end for
		}//end if
	}//end method


	@Override
	public void keyReleased(KeyEvent e) {
		int key = e.getKeyCode();
		if(key == Event.LEFT)    {
			playerMoveLeft = false;
		}    else if(key == Event.RIGHT)    {
			playerMoveRight = false;
		}//end if
	}//end method
}//end class


